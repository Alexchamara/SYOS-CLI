<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0&#10;         http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;com.syos&lt;/groupId&gt;&#10;    &lt;artifactId&gt;syos-pos&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;    &lt;name&gt;SYOS POS System&lt;/name&gt;&#10;    &lt;description&gt;Point of Sale System with CLI and Web interfaces&lt;/description&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;&#10;        &lt;!-- Dependency versions --&gt;&#10;        &lt;junit.version&gt;5.10.0&lt;/junit.version&gt;&#10;        &lt;mockito.version&gt;5.6.0&lt;/mockito.version&gt;&#10;        &lt;testcontainers.version&gt;1.19.0&lt;/testcontainers.version&gt;&#10;        &lt;postgresql.version&gt;42.6.0&lt;/postgresql.version&gt;&#10;        &lt;h2.version&gt;2.2.224&lt;/h2.version&gt;&#10;        &lt;slf4j.version&gt;2.0.9&lt;/slf4j.version&gt;&#10;        &lt;logback.version&gt;1.4.11&lt;/logback.version&gt;&#10;        &lt;assertj.version&gt;3.24.2&lt;/assertj.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Database Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;version&gt;${postgresql.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;            &lt;version&gt;${h2.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Logging Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;&#10;            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&#10;            &lt;version&gt;${slf4j.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;&#10;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;&#10;            &lt;version&gt;${logback.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Testing Dependencies --&gt;&#10;        &lt;!-- JUnit 5 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-params&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Mockito --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mockito&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;&#10;            &lt;version&gt;${mockito.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mockito&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mockito-junit-jupiter&lt;/artifactId&gt;&#10;            &lt;version&gt;${mockito.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- AssertJ for fluent assertions --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.assertj&lt;/groupId&gt;&#10;            &lt;artifactId&gt;assertj-core&lt;/artifactId&gt;&#10;            &lt;version&gt;${assertj.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- TestContainers for integration testing --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;version&gt;${testcontainers.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;version&gt;${testcontainers.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;testcontainers&lt;/artifactId&gt;&#10;            &lt;version&gt;${testcontainers.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- System testing utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.github.stefanbirkner&lt;/groupId&gt;&#10;            &lt;artifactId&gt;system-lambda&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2.1&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.github.stefanbirkner&lt;/groupId&gt;&#10;            &lt;artifactId&gt;system-rules&lt;/artifactId&gt;&#10;            &lt;version&gt;1.19.0&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- For testing CLI input/output --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.awaitility&lt;/groupId&gt;&#10;            &lt;artifactId&gt;awaitility&lt;/artifactId&gt;&#10;            &lt;version&gt;4.2.0&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- JSON testing utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.json&lt;/groupId&gt;&#10;            &lt;artifactId&gt;json&lt;/artifactId&gt;&#10;            &lt;version&gt;20230618&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- For testing concurrent code --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;net.jodah&lt;/groupId&gt;&#10;            &lt;artifactId&gt;concurrentunit&lt;/artifactId&gt;&#10;            &lt;version&gt;0.4.6&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Apache Commons for utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;&#10;            &lt;version&gt;3.13.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;commons-io&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;&#10;            &lt;version&gt;2.13.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;sourceDirectory&gt;src/main/java&lt;/sourceDirectory&gt;&#10;        &lt;testSourceDirectory&gt;src/test/java&lt;/testSourceDirectory&gt;&#10;&#10;        &lt;resources&gt;&#10;            &lt;resource&gt;&#10;                &lt;directory&gt;src/main/resources&lt;/directory&gt;&#10;            &lt;/resource&gt;&#10;        &lt;/resources&gt;&#10;&#10;        &lt;testResources&gt;&#10;            &lt;testResource&gt;&#10;                &lt;directory&gt;src/test/resources&lt;/directory&gt;&#10;            &lt;/testResource&gt;&#10;        &lt;/testResources&gt;&#10;&#10;        &lt;plugins&gt;&#10;            &lt;!-- Maven Compiler Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.11.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;release&gt;21&lt;/release&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Surefire Plugin for unit tests --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.5.4&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;argLine&gt;&#10;                        -Dnet.bytebuddy.experimental=true&#10;                        -XX:+EnableDynamicAgentLoading&#10;                        --add-opens java.base/java.lang=ALL-UNNAMED&#10;                        --add-opens java.base/java.util=ALL-UNNAMED&#10;                        --add-opens java.base/java.nio=ALL-UNNAMED&#10;                        --add-opens java.base/sun.nio.ch=ALL-UNNAMED&#10;                    &lt;/argLine&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Failsafe Plugin for integration tests --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.1.2&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;includes&gt;&#10;                        &lt;include&gt;**/*IntegrationTest.java&lt;/include&gt;&#10;                        &lt;include&gt;**/*IT.java&lt;/include&gt;&#10;                    &lt;/includes&gt;&#10;                &lt;/configuration&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;integration-test&lt;/goal&gt;&#10;                            &lt;goal&gt;verify&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Shade Plugin for creating executable JAR --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.5.0&lt;/version&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;phase&gt;package&lt;/phase&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;shade&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;transformers&gt;&#10;                                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;&#10;                                    &lt;mainClass&gt;main.java.App&lt;/mainClass&gt;&#10;                                &lt;/transformer&gt;&#10;                            &lt;/transformers&gt;&#10;                            &lt;filters&gt;&#10;                                &lt;filter&gt;&#10;                                    &lt;artifact&gt;*:*&lt;/artifact&gt;&#10;                                    &lt;excludes&gt;&#10;                                        &lt;exclude&gt;META-INF/*.SF&lt;/exclude&gt;&#10;                                        &lt;exclude&gt;META-INF/*.DSA&lt;/exclude&gt;&#10;                                        &lt;exclude&gt;META-INF/*.RSA&lt;/exclude&gt;&#10;                                    &lt;/excludes&gt;&#10;                                &lt;/filter&gt;&#10;                            &lt;/filters&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Clean Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.3.1&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Resources Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.3.1&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven JAR Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.3.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;archive&gt;&#10;                        &lt;manifest&gt;&#10;                            &lt;mainClass&gt;main.java.App&lt;/mainClass&gt;&#10;                        &lt;/manifest&gt;&#10;                    &lt;/archive&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Install Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.1.1&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Deploy Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.1.1&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Site Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;4.0.0-M9&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&#10;    &lt;profiles&gt;&#10;        &lt;!-- Profile for running all tests including integration tests --&gt;&#10;        &lt;profile&gt;&#10;            &lt;id&gt;all-tests&lt;/id&gt;&#10;            &lt;build&gt;&#10;                &lt;plugins&gt;&#10;                    &lt;plugin&gt;&#10;                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;includes&gt;&#10;                                &lt;include&gt;**/*Test.java&lt;/include&gt;&#10;                                &lt;include&gt;**/*Tests.java&lt;/include&gt;&#10;                                &lt;include&gt;**/*IntegrationTest.java&lt;/include&gt;&#10;                                &lt;include&gt;**/*IT.java&lt;/include&gt;&#10;                            &lt;/includes&gt;&#10;                            &lt;excludes&gt;&#10;                                &lt;!-- No excludes for this profile --&gt;&#10;                            &lt;/excludes&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/plugin&gt;&#10;                &lt;/plugins&gt;&#10;            &lt;/build&gt;&#10;        &lt;/profile&gt;&#10;&#10;        &lt;!-- Profile for running only unit tests --&gt;&#10;        &lt;profile&gt;&#10;            &lt;id&gt;unit-tests&lt;/id&gt;&#10;            &lt;activation&gt;&#10;                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;&#10;            &lt;/activation&gt;&#10;            &lt;build&gt;&#10;                &lt;plugins&gt;&#10;                    &lt;plugin&gt;&#10;                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;includes&gt;&#10;                                &lt;include&gt;**/*Test.java&lt;/include&gt;&#10;                                &lt;include&gt;**/*Tests.java&lt;/include&gt;&#10;                            &lt;/includes&gt;&#10;                            &lt;excludes&gt;&#10;                                &lt;exclude&gt;**/*IntegrationTest.java&lt;/exclude&gt;&#10;                                &lt;exclude&gt;**/*IT.java&lt;/exclude&gt;&#10;                            &lt;/excludes&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/plugin&gt;&#10;                &lt;/plugins&gt;&#10;            &lt;/build&gt;&#10;        &lt;/profile&gt;&#10;    &lt;/profiles&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0&#10;         http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;com.syos&lt;/groupId&gt;&#10;    &lt;artifactId&gt;syos-pos&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;    &lt;name&gt;SYOS POS System&lt;/name&gt;&#10;    &lt;description&gt;Point of Sale System with CLI and Web interfaces&lt;/description&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;&#10;        &lt;!-- Dependency versions --&gt;&#10;        &lt;junit.version&gt;5.10.0&lt;/junit.version&gt;&#10;        &lt;mockito.version&gt;5.6.0&lt;/mockito.version&gt;&#10;        &lt;testcontainers.version&gt;1.19.0&lt;/testcontainers.version&gt;&#10;        &lt;postgresql.version&gt;42.6.0&lt;/postgresql.version&gt;&#10;        &lt;h2.version&gt;2.2.224&lt;/h2.version&gt;&#10;        &lt;slf4j.version&gt;2.0.9&lt;/slf4j.version&gt;&#10;        &lt;logback.version&gt;1.4.11&lt;/logback.version&gt;&#10;        &lt;assertj.version&gt;3.24.2&lt;/assertj.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Database Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;version&gt;${postgresql.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;            &lt;version&gt;${h2.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Logging Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;&#10;            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&#10;            &lt;version&gt;${slf4j.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;&#10;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;&#10;            &lt;version&gt;${logback.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Testing Dependencies --&gt;&#10;        &lt;!-- JUnit 5 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter-params&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Mockito --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mockito&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;&#10;            &lt;version&gt;${mockito.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mockito&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mockito-junit-jupiter&lt;/artifactId&gt;&#10;            &lt;version&gt;${mockito.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- AssertJ for fluent assertions --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.assertj&lt;/groupId&gt;&#10;            &lt;artifactId&gt;assertj-core&lt;/artifactId&gt;&#10;            &lt;version&gt;${assertj.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- TestContainers for integration testing --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;version&gt;${testcontainers.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;version&gt;${testcontainers.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;testcontainers&lt;/artifactId&gt;&#10;            &lt;version&gt;${testcontainers.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- System testing utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.github.stefanbirkner&lt;/groupId&gt;&#10;            &lt;artifactId&gt;system-lambda&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2.1&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.github.stefanbirkner&lt;/groupId&gt;&#10;            &lt;artifactId&gt;system-rules&lt;/artifactId&gt;&#10;            &lt;version&gt;1.19.0&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- For testing CLI input/output --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.awaitility&lt;/groupId&gt;&#10;            &lt;artifactId&gt;awaitility&lt;/artifactId&gt;&#10;            &lt;version&gt;4.2.0&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- JSON testing utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.json&lt;/groupId&gt;&#10;            &lt;artifactId&gt;json&lt;/artifactId&gt;&#10;            &lt;version&gt;20230618&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- For testing concurrent code --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;net.jodah&lt;/groupId&gt;&#10;            &lt;artifactId&gt;concurrentunit&lt;/artifactId&gt;&#10;            &lt;version&gt;0.4.6&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Apache Commons for utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;&#10;            &lt;version&gt;3.13.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;commons-io&lt;/groupId&gt;&#10;            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;&#10;            &lt;version&gt;2.13.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;sourceDirectory&gt;src/main/java&lt;/sourceDirectory&gt;&#10;        &lt;testSourceDirectory&gt;src/test/java&lt;/testSourceDirectory&gt;&#10;&#10;        &lt;resources&gt;&#10;            &lt;resource&gt;&#10;                &lt;directory&gt;src/main/resources&lt;/directory&gt;&#10;            &lt;/resource&gt;&#10;        &lt;/resources&gt;&#10;&#10;        &lt;testResources&gt;&#10;            &lt;testResource&gt;&#10;                &lt;directory&gt;src/test/resources&lt;/directory&gt;&#10;            &lt;/testResource&gt;&#10;        &lt;/testResources&gt;&#10;&#10;        &lt;plugins&gt;&#10;            &lt;!-- Maven Compiler Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.11.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;release&gt;21&lt;/release&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Surefire Plugin for unit tests --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.5.4&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;argLine&gt;&#10;                        -Dnet.bytebuddy.experimental=true&#10;                        -XX:+EnableDynamicAgentLoading&#10;                        -XX:+UnlockExperimentalVMOptions&#10;                        -XX:+UseZGC&#10;                        --add-opens java.base/java.lang=ALL-UNNAMED&#10;                        --add-opens java.base/java.util=ALL-UNNAMED&#10;                        --add-opens java.base/java.nio=ALL-UNNAMED&#10;                        --add-opens java.base/sun.nio.ch=ALL-UNNAMED&#10;                        --add-opens java.base/sun.misc=ALL-UNNAMED&#10;                        --add-opens java.base/java.lang.reflect=ALL-UNNAMED&#10;                        --add-opens java.base/java.text=ALL-UNNAMED&#10;                        --add-opens java.base/java.util.concurrent=ALL-UNNAMED&#10;                        --add-opens java.base/java.io=ALL-UNNAMED&#10;                        -Djdk.instrument.traceUsage=false&#10;                        -XX:-PrintWarnings&#10;                    &lt;/argLine&gt;&#10;                    &lt;forkCount&gt;1&lt;/forkCount&gt;&#10;                    &lt;reuseForks&gt;false&lt;/reuseForks&gt;&#10;                    &lt;forkedProcessTimeoutInSeconds&gt;300&lt;/forkedProcessTimeoutInSeconds&gt;&#10;                    &lt;useSystemClassLoader&gt;false&lt;/useSystemClassLoader&gt;&#10;                    &lt;trimStackTrace&gt;false&lt;/trimStackTrace&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Failsafe Plugin for integration tests --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.1.2&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;includes&gt;&#10;                        &lt;include&gt;**/*IntegrationTest.java&lt;/include&gt;&#10;                        &lt;include&gt;**/*IT.java&lt;/include&gt;&#10;                    &lt;/includes&gt;&#10;                &lt;/configuration&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;integration-test&lt;/goal&gt;&#10;                            &lt;goal&gt;verify&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Shade Plugin for creating executable JAR --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.5.0&lt;/version&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;phase&gt;package&lt;/phase&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;shade&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;transformers&gt;&#10;                                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;&#10;                                    &lt;mainClass&gt;main.java.App&lt;/mainClass&gt;&#10;                                &lt;/transformer&gt;&#10;                            &lt;/transformers&gt;&#10;                            &lt;filters&gt;&#10;                                &lt;filter&gt;&#10;                                    &lt;artifact&gt;*:*&lt;/artifact&gt;&#10;                                    &lt;excludes&gt;&#10;                                        &lt;exclude&gt;META-INF/*.SF&lt;/exclude&gt;&#10;                                        &lt;exclude&gt;META-INF/*.DSA&lt;/exclude&gt;&#10;                                        &lt;exclude&gt;META-INF/*.RSA&lt;/exclude&gt;&#10;                                    &lt;/excludes&gt;&#10;                                &lt;/filter&gt;&#10;                            &lt;/filters&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Clean Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.3.1&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Resources Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.3.1&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven JAR Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.3.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;archive&gt;&#10;                        &lt;manifest&gt;&#10;                            &lt;mainClass&gt;main.java.App&lt;/mainClass&gt;&#10;                        &lt;/manifest&gt;&#10;                    &lt;/archive&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Install Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.1.1&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Deploy Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.1.1&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Site Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;4.0.0-M9&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- JaCoCo Code Coverage Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.jacoco&lt;/groupId&gt;&#10;                &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;0.8.11&lt;/version&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;prepare-agent&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                    &lt;/execution&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;id&gt;report&lt;/id&gt;&#10;                        &lt;phase&gt;test&lt;/phase&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;report&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                    &lt;/execution&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;id&gt;check&lt;/id&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;check&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;rules&gt;&#10;                                &lt;rule&gt;&#10;                                    &lt;element&gt;BUNDLE&lt;/element&gt;&#10;                                    &lt;limits&gt;&#10;                                        &lt;limit&gt;&#10;                                            &lt;counter&gt;CLASS&lt;/counter&gt;&#10;                                            &lt;value&gt;COVEREDRATIO&lt;/value&gt;&#10;                                            &lt;minimum&gt;1.00&lt;/minimum&gt;&#10;                                        &lt;/limit&gt;&#10;                                        &lt;limit&gt;&#10;                                            &lt;counter&gt;METHOD&lt;/counter&gt;&#10;                                            &lt;value&gt;COVEREDRATIO&lt;/value&gt;&#10;                                            &lt;minimum&gt;1.00&lt;/minimum&gt;&#10;                                        &lt;/limit&gt;&#10;                                        &lt;limit&gt;&#10;                                            &lt;counter&gt;LINE&lt;/counter&gt;&#10;                                            &lt;value&gt;COVEREDRATIO&lt;/value&gt;&#10;                                            &lt;minimum&gt;1.00&lt;/minimum&gt;&#10;                                        &lt;/limit&gt;&#10;                                        &lt;limit&gt;&#10;                                            &lt;counter&gt;BRANCH&lt;/counter&gt;&#10;                                            &lt;value&gt;COVEREDRATIO&lt;/value&gt;&#10;                                            &lt;minimum&gt;1.00&lt;/minimum&gt;&#10;                                        &lt;/limit&gt;&#10;                                    &lt;/limits&gt;&#10;                                &lt;/rule&gt;&#10;                            &lt;/rules&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&#10;    &lt;profiles&gt;&#10;        &lt;!-- Profile for running all tests including integration tests --&gt;&#10;        &lt;profile&gt;&#10;            &lt;id&gt;all-tests&lt;/id&gt;&#10;            &lt;build&gt;&#10;                &lt;plugins&gt;&#10;                    &lt;plugin&gt;&#10;                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;includes&gt;&#10;                                &lt;include&gt;**/*Test.java&lt;/include&gt;&#10;                                &lt;include&gt;**/*Tests.java&lt;/include&gt;&#10;                                &lt;include&gt;**/*IntegrationTest.java&lt;/include&gt;&#10;                                &lt;include&gt;**/*IT.java&lt;/include&gt;&#10;                            &lt;/includes&gt;&#10;                            &lt;excludes&gt;&#10;                                &lt;!-- No excludes for this profile --&gt;&#10;                            &lt;/excludes&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/plugin&gt;&#10;                &lt;/plugins&gt;&#10;            &lt;/build&gt;&#10;        &lt;/profile&gt;&#10;&#10;        &lt;!-- Profile for running only unit tests --&gt;&#10;        &lt;profile&gt;&#10;            &lt;id&gt;unit-tests&lt;/id&gt;&#10;            &lt;activation&gt;&#10;                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;&#10;            &lt;/activation&gt;&#10;            &lt;build&gt;&#10;                &lt;plugins&gt;&#10;                    &lt;plugin&gt;&#10;                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;includes&gt;&#10;                                &lt;include&gt;**/*Test.java&lt;/include&gt;&#10;                                &lt;include&gt;**/*Tests.java&lt;/include&gt;&#10;                            &lt;/includes&gt;&#10;                            &lt;excludes&gt;&#10;                                &lt;exclude&gt;**/*IntegrationTest.java&lt;/exclude&gt;&#10;                                &lt;exclude&gt;**/*IT.java&lt;/exclude&gt;&#10;                            &lt;/excludes&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/plugin&gt;&#10;                &lt;/plugins&gt;&#10;            &lt;/build&gt;&#10;        &lt;/profile&gt;&#10;    &lt;/profiles&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/domain/repository/WebUserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/domain/repository/WebUserRepository.java" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="// This file is deprecated and should be deleted.&#10;// The CustomerRepository interface has been moved to CustomerRepository.java&#10;// This file is kept only to avoid breaking any existing imports during transition." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/infrastructure/persistence/JdbcWebUserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/infrastructure/persistence/JdbcWebUserRepository.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package main.java.infrastructure.persistence;&#10;&#10;import main.java.domain.model.User;&#10;import main.java.domain.repository.CustomerRepository;&#10;&#10;import javax.sql.DataSource;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.sql.Statement;&#10;&#10;/**&#10; * JDBC implementation of CustomerRepository&#10; */&#10;public final class JdbcCustomerRepository implements CustomerRepository {&#10;    private final DataSource dataSource;&#10;&#10;    public JdbcCustomerRepository(DataSource dataSource) {&#10;        this.dataSource = dataSource;&#10;    }&#10;&#10;    @Override&#10;    public long create(String email, String passwordHash, String fullName) {&#10;        try (Connection con = dataSource.getConnection();&#10;             PreparedStatement ps = con.prepareStatement(&#10;                     &quot;INSERT INTO users (email, password_hash, full_name, role, username, created_at) VALUES (?, ?, ?, 'USER', ?, NOW())&quot;,&#10;                     Statement.RETURN_GENERATED_KEYS)) {&#10;&#10;            ps.setString(1, email);&#10;            ps.setString(2, passwordHash);&#10;            ps.setString(3, fullName);&#10;            ps.setString(4, email); // Use email as username for WEB users&#10;&#10;            ps.executeUpdate();&#10;&#10;            try (ResultSet rs = ps.getGeneratedKeys()) {&#10;                if (rs.next()) {&#10;                    return rs.getLong(1);&#10;                }&#10;                throw new RuntimeException(&quot;Failed to get generated user ID&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Failed to create user&quot;, e);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public User findByEmail(String email) {&#10;        try (Connection con = dataSource.getConnection();&#10;             PreparedStatement ps = con.prepareStatement(&#10;                     &quot;SELECT id, email, full_name FROM users WHERE email = ? AND role = 'USER'&quot;)) {&#10;&#10;            ps.setString(1, email);&#10;&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return new User(&#10;                            rs.getLong(&quot;id&quot;),&#10;                            rs.getString(&quot;email&quot;),&#10;                            rs.getString(&quot;full_name&quot;)&#10;                    );&#10;                }&#10;                return null;&#10;            }&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Failed to find user by email&quot;, e);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String passwordHashByEmail(String email) {&#10;        try (Connection con = dataSource.getConnection();&#10;             PreparedStatement ps = con.prepareStatement(&#10;                     &quot;SELECT password_hash FROM users WHERE email = ? AND role = 'USER'&quot;)) {&#10;&#10;            ps.setString(1, email);&#10;&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return rs.getString(&quot;password_hash&quot;);&#10;                }&#10;                return null;&#10;            }&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Failed to get password hash&quot;, e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/db/migration/V16__create_orders_tables.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/db/migration/V16__create_orders_tables.sql" />
              <option name="updatedContent" value="-- Create orders table for web shop orders&#10;CREATE TABLE orders (&#10;    id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;    bill_serial BIGINT NOT NULL,&#10;    type VARCHAR(20) NOT NULL,&#10;    location VARCHAR(20) NOT NULL,&#10;    user_id BIGINT,&#10;    total_gross DECIMAL(10,2) NOT NULL,&#10;    discount DECIMAL(10,2) NOT NULL DEFAULT 0,&#10;    total_net DECIMAL(10,2) NOT NULL,&#10;    status VARCHAR(20) NOT NULL DEFAULT 'PREVIEW',&#10;    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,&#10;    FOREIGN KEY (user_id) REFERENCES customers(id) ON DELETE SET NULL&#10;);&#10;&#10;-- Create order_lines table for web shop order items&#10;CREATE TABLE order_lines (&#10;    id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;    order_id BIGINT NOT NULL,&#10;    product_code VARCHAR(50) NOT NULL,&#10;    name VARCHAR(255) NOT NULL,&#10;    unit_price DECIMAL(10,2) NOT NULL,&#10;    qty INT NOT NULL,&#10;    line_total DECIMAL(10,2) NOT NULL,&#10;    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE&#10;);&#10;&#10;-- Create payments table for web shop payments&#10;CREATE TABLE payments (&#10;    id BIGINT AUTO_INCREMENT PRIMARY KEY,&#10;    order_id BIGINT NOT NULL,&#10;    payment_type VARCHAR(20) NOT NULL DEFAULT 'CARD',&#10;    card_last4 VARCHAR(4),&#10;    auth_reference VARCHAR(100),&#10;    amount DECIMAL(10,2) NOT NULL,&#10;    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/application/services/BillNumberServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/application/services/BillNumberServiceTest.java" />
              <option name="originalContent" value="package application.services;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Nested;&#10;import org.mockito.MockitoAnnotations;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@DisplayName(&quot;BillNumberService Tests&quot;)&#10;class BillNumberServiceTest {&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Nested&#10;    @DisplayName(&quot;Service Implementation Tests&quot;)&#10;    class ServiceImplementationTests {&#10;&#10;        @Test&#10;        @DisplayName(&quot;Should handle empty service implementation&quot;)&#10;        void shouldHandleEmptyServiceImplementation() {&#10;            // This test acknowledges that BillNumberService is currently empty&#10;            // In a real implementation, this would test actual bill number generation functionality&#10;&#10;            // Given - BillNumberService is not implemented&#10;            // When - No bill number operations available&#10;            // Then - Test passes as placeholder&#10;            assertTrue(true, &quot;BillNumberService is not implemented yet&quot;);&#10;        }&#10;&#10;        @Test&#10;        @DisplayName(&quot;Would generate sequential bill numbers if implemented&quot;)&#10;        void wouldGenerateSequentialBillNumbersIfImplemented() {&#10;            // This would be the expected behavior if BillNumberService was implemented:&#10;            // BillNumberService service = new BillNumberService();&#10;            // String billNumber1 = service.generateNext(&quot;COUNTER&quot;);&#10;            // String billNumber2 = service.generateNext(&quot;COUNTER&quot;);&#10;&#10;            // Expected format examples:&#10;            String expectedFormat1 = &quot;COUNTER-001&quot;;&#10;            String expectedFormat2 = &quot;COUNTER-002&quot;;&#10;&#10;            // Then - This shows what the functionality might look like&#10;            assertNotNull(expectedFormat1);&#10;            assertNotNull(expectedFormat2);&#10;            assertTrue(expectedFormat1.startsWith(&quot;COUNTER-&quot;));&#10;            assertTrue(expectedFormat2.startsWith(&quot;COUNTER-&quot;));&#10;        }&#10;&#10;        @Test&#10;        @DisplayName(&quot;Would handle different bill scopes if implemented&quot;)&#10;        void wouldHandleDifferentBillScopesIfImplemented() {&#10;            // Expected scopes: COUNTER, WEB, QUOTE, etc.&#10;            String[] expectedScopes = {&quot;COUNTER&quot;, &quot;WEB&quot;, &quot;QUOTE&quot;};&#10;&#10;            // This would be the expected behavior:&#10;            // for (String scope : expectedScopes) {&#10;            //     String billNumber = service.generateNext(scope);&#10;            //     assertTrue(billNumber.startsWith(scope + &quot;-&quot;));&#10;            // }&#10;&#10;            assertEquals(3, expectedScopes.length);&#10;            for (String scope : expectedScopes) {&#10;                assertNotNull(scope);&#10;                assertFalse(scope.isEmpty());&#10;            }&#10;        }&#10;    }&#10;&#10;    @Nested&#10;    @DisplayName(&quot;Future Implementation Requirements&quot;)&#10;    class FutureImplementationRequirements {&#10;&#10;        @Test&#10;        @DisplayName(&quot;Should support thread-safe bill number generation&quot;)&#10;        void shouldSupportThreadSafeBillNumberGeneration() {&#10;            // Expected thread safety requirements documented&#10;            assertTrue(true, &quot;Thread safety required for concurrent bill generation&quot;);&#10;        }&#10;&#10;        @Test&#10;        @DisplayName(&quot;Should support bill number format customization&quot;)&#10;        void shouldSupportBillNumberFormatCustomization() {&#10;            // Expected format patterns: {SCOPE}-{SEQUENCE}, {DATE}-{SCOPE}-{SEQUENCE}, etc.&#10;            assertTrue(true, &quot;Format customization should be supported&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package application.services;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Nested;&#10;import org.mockito.Mock;&#10;import org.mockito.MockitoAnnotations;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;import application.services.BillNumberService;&#10;import infrastructure.concurrency.Tx;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.sql.SQLException;&#10;import java.util.function.Function;&#10;&#10;@DisplayName(&quot;BillNumberService Tests&quot;)&#10;class BillNumberServiceTest {&#10;&#10;    @Mock&#10;    private Tx tx;&#10;    @Mock&#10;    private Connection connection;&#10;    @Mock&#10;    private PreparedStatement selectStatement;&#10;    @Mock&#10;    private PreparedStatement updateStatement;&#10;    @Mock&#10;    private ResultSet resultSet;&#10;&#10;    private BillNumberService billNumberService;&#10;&#10;    @BeforeEach&#10;    void setUp() throws SQLException {&#10;        MockitoAnnotations.openMocks(this);&#10;        billNumberService = new BillNumberService(tx);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should create BillNumberService with Tx dependency&quot;)&#10;    void shouldCreateBillNumberServiceWithTxDependency() {&#10;        // When&#10;        BillNumberService service = new BillNumberService(tx);&#10;&#10;        // Then&#10;        assertNotNull(service);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should generate next bill number for COUNTER scope&quot;)&#10;    void shouldGenerateNextBillNumberForCounterScope() throws SQLException {&#10;        // Given&#10;        String scope = &quot;COUNTER&quot;;&#10;        long currentValue = 5L;&#10;        setupMocksForSuccessfulGeneration(scope, currentValue);&#10;&#10;        // When&#10;        String result = billNumberService.next(scope);&#10;&#10;        // Then&#10;        assertEquals(&quot;C-000005&quot;, result);&#10;        verifyDatabaseInteractions(scope, currentValue + 1);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should generate next bill number for WEB scope&quot;)&#10;    void shouldGenerateNextBillNumberForWebScope() throws SQLException {&#10;        // Given&#10;        String scope = &quot;WEB&quot;;&#10;        long currentValue = 15L;&#10;        setupMocksForSuccessfulGeneration(scope, currentValue);&#10;&#10;        // When&#10;        String result = billNumberService.next(scope);&#10;&#10;        // Then&#10;        assertEquals(&quot;W-000015&quot;, result);&#10;        verifyDatabaseInteractions(scope, currentValue + 1);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle empty scope with X prefix&quot;)&#10;    void shouldHandleEmptyScopeWithXPrefix() throws SQLException {&#10;        // Given&#10;        String scope = &quot;&quot;;&#10;        long currentValue = 1L;&#10;        setupMocksForSuccessfulGeneration(scope, currentValue);&#10;&#10;        // When&#10;        String result = billNumberService.next(scope);&#10;&#10;        // Then&#10;        assertEquals(&quot;X-000001&quot;, result);&#10;        verifyDatabaseInteractions(scope, currentValue + 1);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle single character scope&quot;)&#10;    void shouldHandleSingleCharacterScope() throws SQLException {&#10;        // Given&#10;        String scope = &quot;Q&quot;;&#10;        long currentValue = 99L;&#10;        setupMocksForSuccessfulGeneration(scope, currentValue);&#10;&#10;        // When&#10;        String result = billNumberService.next(scope);&#10;&#10;        // Then&#10;        assertEquals(&quot;Q-000099&quot;, result);&#10;        verifyDatabaseInteractions(scope, currentValue + 1);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should convert scope prefix to uppercase&quot;)&#10;    void shouldConvertScopePrefixToUppercase() throws SQLException {&#10;        // Given&#10;        String scope = &quot;quote&quot;;&#10;        long currentValue = 3L;&#10;        setupMocksForSuccessfulGeneration(scope, currentValue);&#10;&#10;        // When&#10;        String result = billNumberService.next(scope);&#10;&#10;        // Then&#10;        assertEquals(&quot;Q-000003&quot;, result);&#10;        verifyDatabaseInteractions(scope, currentValue + 1);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should format numbers with leading zeros&quot;)&#10;    void shouldFormatNumbersWithLeadingZeros() throws SQLException {&#10;        // Given&#10;        String scope = &quot;INVOICE&quot;;&#10;        long currentValue = 1L;&#10;        setupMocksForSuccessfulGeneration(scope, currentValue);&#10;&#10;        // When&#10;        String result = billNumberService.next(scope);&#10;&#10;        // Then&#10;        assertEquals(&quot;I-000001&quot;, result);&#10;        verifyDatabaseInteractions(scope, currentValue + 1);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle large numbers&quot;)&#10;    void shouldHandleLargeNumbers() throws SQLException {&#10;        // Given&#10;        String scope = &quot;RECEIPT&quot;;&#10;        long currentValue = 999999L;&#10;        setupMocksForSuccessfulGeneration(scope, currentValue);&#10;&#10;        // When&#10;        String result = billNumberService.next(scope);&#10;&#10;        // Then&#10;        assertEquals(&quot;R-999999&quot;, result);&#10;        verifyDatabaseInteractions(scope, currentValue + 1);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should throw exception when scope not found&quot;)&#10;    void shouldThrowExceptionWhenScopeNotFound() throws SQLException {&#10;        // Given&#10;        String scope = &quot;UNKNOWN&quot;;&#10;        when(tx.inTx(any())).thenAnswer(invocation -&gt; {&#10;            Function&lt;Connection, String&gt; function = invocation.getArgument(0);&#10;            when(connection.prepareStatement(anyString())).thenReturn(selectStatement);&#10;            when(selectStatement.executeQuery()).thenReturn(resultSet);&#10;            when(resultSet.next()).thenReturn(false); // No scope found&#10;&#10;            return function.apply(connection);&#10;        });&#10;&#10;        // When &amp; Then&#10;        RuntimeException exception = assertThrows(RuntimeException.class,&#10;            () -&gt; billNumberService.next(scope));&#10;        &#10;        assertTrue(exception.getCause() instanceof IllegalStateException);&#10;        assertEquals(&quot;Unknown scope: &quot; + scope, exception.getCause().getMessage());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should wrap SQL exceptions in RuntimeException&quot;)&#10;    void shouldWrapSqlExceptionsInRuntimeException() throws SQLException {&#10;        // Given&#10;        String scope = &quot;ERROR&quot;;&#10;        when(tx.inTx(any())).thenAnswer(invocation -&gt; {&#10;            Function&lt;Connection, String&gt; function = invocation.getArgument(0);&#10;            when(connection.prepareStatement(anyString())).thenThrow(new SQLException(&quot;Database error&quot;));&#10;            &#10;            return function.apply(connection);&#10;        });&#10;&#10;        // When &amp; Then&#10;        RuntimeException exception = assertThrows(RuntimeException.class,&#10;            () -&gt; billNumberService.next(scope));&#10;        &#10;        assertTrue(exception.getCause() instanceof SQLException);&#10;        assertEquals(&quot;Database error&quot;, exception.getCause().getMessage());&#10;    }&#10;&#10;    private void setupMocksForSuccessfulGeneration(String scope, long currentValue) throws SQLException {&#10;        when(tx.inTx(any())).thenAnswer(invocation -&gt; {&#10;            Function&lt;Connection, String&gt; function = invocation.getArgument(0);&#10;            &#10;            // Mock SELECT statement&#10;            when(connection.prepareStatement(contains(&quot;SELECT next_val FROM bill_number&quot;)))&#10;                .thenReturn(selectStatement);&#10;            when(selectStatement.executeQuery()).thenReturn(resultSet);&#10;            when(resultSet.next()).thenReturn(true);&#10;            when(resultSet.getLong(1)).thenReturn(currentValue);&#10;            &#10;            // Mock UPDATE statement&#10;            when(connection.prepareStatement(contains(&quot;UPDATE bill_number&quot;)))&#10;                .thenReturn(updateStatement);&#10;            when(updateStatement.executeUpdate()).thenReturn(1);&#10;&#10;            return function.apply(connection);&#10;        });&#10;    }&#10;&#10;    private void verifyDatabaseInteractions(String scope, long nextValue) throws SQLException {&#10;        verify(tx).inTx(any());&#10;        // Additional verifications would be done through the Tx mock&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/application/services/OrderIdServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/application/services/OrderIdServiceTest.java" />
              <option name="originalContent" value="package application.services;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Nested;&#10;import org.mockito.MockitoAnnotations;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@DisplayName(&quot;OrderIdService Tests&quot;)&#10;class OrderIdServiceTest {&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        MockitoAnnotations.openMocks(this);&#10;    }&#10;&#10;    @Nested&#10;    @DisplayName(&quot;Service Implementation Tests&quot;)&#10;    class ServiceImplementationTests {&#10;&#10;        @Test&#10;        @DisplayName(&quot;Should handle empty service implementation&quot;)&#10;        void shouldHandleEmptyServiceImplementation() {&#10;            // This test acknowledges that OrderIdService is currently empty&#10;            // In a real implementation, this would test order ID generation functionality&#10;&#10;            // Given - OrderIdService is not implemented&#10;            // When - No order ID operations available&#10;            // Then - Test passes as placeholder&#10;            assertTrue(true, &quot;OrderIdService is not implemented yet&quot;);&#10;        }&#10;&#10;        @Test&#10;        @DisplayName(&quot;Would generate unique order IDs if implemented&quot;)&#10;        void wouldGenerateUniqueOrderIdsIfImplemented() {&#10;            // Expected functionality for OrderIdService:&#10;            // - Generate unique order IDs for web orders&#10;            // - Ensure no collisions across concurrent requests&#10;            // - Support different ID formats (UUID, sequential, timestamp-based)&#10;&#10;            // Example expected formats:&#10;            String expectedUuidFormat = &quot;ORD-550e8400-e29b-41d4-a716-446655440000&quot;;&#10;            String expectedSequentialFormat = &quot;ORD-000001&quot;;&#10;            String expectedTimestampFormat = &quot;ORD-20250922-001&quot;;&#10;&#10;            assertNotNull(expectedUuidFormat);&#10;            assertNotNull(expectedSequentialFormat);&#10;            assertNotNull(expectedTimestampFormat);&#10;            assertTrue(expectedUuidFormat.startsWith(&quot;ORD-&quot;));&#10;            assertTrue(expectedSequentialFormat.startsWith(&quot;ORD-&quot;));&#10;            assertTrue(expectedTimestampFormat.startsWith(&quot;ORD-&quot;));&#10;        }&#10;&#10;        @Test&#10;        @DisplayName(&quot;Would support order tracking if implemented&quot;)&#10;        void wouldSupportOrderTrackingIfImplemented() {&#10;            // Expected order tracking functionality:&#10;            // - validateOrderId(orderId) -&gt; boolean&#10;            // - getOrderStatus(orderId) -&gt; OrderStatus&#10;            // - reserveOrderId() -&gt; String (for cart checkout)&#10;&#10;            assertTrue(true, &quot;Order tracking functionality documented&quot;);&#10;        }&#10;    }&#10;&#10;    @Nested&#10;    @DisplayName(&quot;Future Implementation Requirements&quot;)&#10;    class FutureImplementationRequirements {&#10;&#10;        @Test&#10;        @DisplayName(&quot;Should support concurrent order ID generation&quot;)&#10;        void shouldSupportConcurrentOrderIdGeneration() {&#10;            // Requirements:&#10;            // - Thread-safe ID generation&#10;            // - Database sequence or atomic operations&#10;            // - No duplicate IDs under high load&#10;&#10;            assertTrue(true, &quot;Concurrent ID generation requirements documented&quot;);&#10;        }&#10;&#10;        @Test&#10;        @DisplayName(&quot;Should integrate with order management&quot;)&#10;        void shouldIntegrateWithOrderManagement() {&#10;            // Integration points:&#10;            // - OrderRepository&#10;            // - CheckoutUseCase (web orders)&#10;            // - Payment processing&#10;&#10;            assertTrue(true, &quot;Order management integration requirements documented&quot;);&#10;        }&#10;&#10;        @Test&#10;        @DisplayName(&quot;Should support order ID validation&quot;)&#10;        void shouldSupportOrderIdValidation() {&#10;            // Validation requirements:&#10;            // - Format validation (length, pattern)&#10;            // - Existence check in database&#10;            // - Status validation (active, completed, cancelled)&#10;&#10;            assertTrue(true, &quot;Order ID validation requirements documented&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package application.services;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.AfterEach;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;import application.services.OrderIdService;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;import java.util.concurrent.CompletableFuture;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;import java.util.regex.Pattern;&#10;&#10;@DisplayName(&quot;OrderIdService Tests&quot;)&#10;class OrderIdServiceTest {&#10;&#10;    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(&quot;yyyyMMdd&quot;);&#10;    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern(&quot;HHmmss&quot;);&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        OrderIdService.resetCounter();&#10;    }&#10;&#10;    @AfterEach&#10;    void tearDown() {&#10;        OrderIdService.resetCounter();&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should generate order ID with correct format&quot;)&#10;    void shouldGenerateOrderIdWithCorrectFormat() {&#10;        // Given&#10;        String prefix = &quot;WEB&quot;;&#10;&#10;        // When&#10;        String orderId = OrderIdService.generateOrderId(prefix);&#10;&#10;        // Then&#10;        assertNotNull(orderId);&#10;        assertTrue(orderId.matches(&quot;WEB-\\d{8}-\\d{6}-\\d{6}&quot;));&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should generate order ID with different prefixes&quot;)&#10;    void shouldGenerateOrderIdWithDifferentPrefixes() {&#10;        // Given&#10;        String[] prefixes = {&quot;WEB&quot;, &quot;MOBILE&quot;, &quot;API&quot;, &quot;ADMIN&quot;};&#10;&#10;        // When &amp; Then&#10;        for (String prefix : prefixes) {&#10;            String orderId = OrderIdService.generateOrderId(prefix);&#10;            assertTrue(orderId.startsWith(prefix + &quot;-&quot;));&#10;        }&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should generate order ID with current date&quot;)&#10;    void shouldGenerateOrderIdWithCurrentDate() {&#10;        // Given&#10;        String prefix = &quot;ORDER&quot;;&#10;        String expectedDate = LocalDateTime.now().format(DATE_FORMATTER);&#10;&#10;        // When&#10;        String orderId = OrderIdService.generateOrderId(prefix);&#10;&#10;        // Then&#10;        assertTrue(orderId.contains(expectedDate));&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should generate order ID with current time&quot;)&#10;    void shouldGenerateOrderIdWithCurrentTime() {&#10;        // Given&#10;        String prefix = &quot;ORDER&quot;;&#10;        LocalDateTime before = LocalDateTime.now();&#10;        &#10;        // When&#10;        String orderId = OrderIdService.generateOrderId(prefix);&#10;        &#10;        LocalDateTime after = LocalDateTime.now();&#10;&#10;        // Then&#10;        // Extract time part from order ID&#10;        String[] parts = orderId.split(&quot;-&quot;);&#10;        assertEquals(4, parts.length);&#10;        String timePart = parts[2];&#10;        &#10;        // Time should be between before and after&#10;        String beforeTime = before.format(TIME_FORMATTER);&#10;        String afterTime = after.format(TIME_FORMATTER);&#10;        &#10;        assertTrue(timePart.compareTo(beforeTime) &gt;= 0);&#10;        assertTrue(timePart.compareTo(afterTime) &lt;= 0);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should generate sequential numbers&quot;)&#10;    void shouldGenerateSequentialNumbers() {&#10;        // Given&#10;        String prefix = &quot;SEQ&quot;;&#10;&#10;        // When&#10;        String orderId1 = OrderIdService.generateOrderId(prefix);&#10;        String orderId2 = OrderIdService.generateOrderId(prefix);&#10;        String orderId3 = OrderIdService.generateOrderId(prefix);&#10;&#10;        // Then&#10;        String[] parts1 = orderId1.split(&quot;-&quot;);&#10;        String[] parts2 = orderId2.split(&quot;-&quot;);&#10;        String[] parts3 = orderId3.split(&quot;-&quot;);&#10;&#10;        assertEquals(&quot;000001&quot;, parts1[3]);&#10;        assertEquals(&quot;000002&quot;, parts2[3]);&#10;        assertEquals(&quot;000003&quot;, parts3[3]);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should format sequence numbers with leading zeros&quot;)&#10;    void shouldFormatSequenceNumbersWithLeadingZeros() {&#10;        // Given&#10;        String prefix = &quot;FORMAT&quot;;&#10;&#10;        // When&#10;        String orderId = OrderIdService.generateOrderId(prefix);&#10;&#10;        // Then&#10;        String[] parts = orderId.split(&quot;-&quot;);&#10;        String sequencePart = parts[3];&#10;        assertEquals(6, sequencePart.length());&#10;        assertTrue(sequencePart.matches(&quot;\\d{6}&quot;));&#10;        assertEquals(&quot;000001&quot;, sequencePart);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should reset counter when reaching maximum&quot;)&#10;    void shouldResetCounterWhenReachingMaximum() {&#10;        // Given&#10;        String prefix = &quot;MAX&quot;;&#10;        &#10;        // Simulate counter at 999999&#10;        for (int i = 1; i &lt; 999999; i++) {&#10;            OrderIdService.generateOrderId(prefix);&#10;        }&#10;&#10;        // When&#10;        String orderIdAtMax = OrderIdService.generateOrderId(prefix);&#10;        String orderIdAfterReset = OrderIdService.generateOrderId(prefix);&#10;&#10;        // Then&#10;        String[] partsAtMax = orderIdAtMax.split(&quot;-&quot;);&#10;        String[] partsAfterReset = orderIdAfterReset.split(&quot;-&quot;);&#10;&#10;        assertEquals(&quot;999999&quot;, partsAtMax[3]);&#10;        assertEquals(&quot;000001&quot;, partsAfterReset[3]);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle empty prefix&quot;)&#10;    void shouldHandleEmptyPrefix() {&#10;        // Given&#10;        String prefix = &quot;&quot;;&#10;&#10;        // When&#10;        String orderId = OrderIdService.generateOrderId(prefix);&#10;&#10;        // Then&#10;        assertNotNull(orderId);&#10;        assertTrue(orderId.startsWith(&quot;-&quot;));&#10;        assertTrue(orderId.matches(&quot;-\\d{8}-\\d{6}-\\d{6}&quot;));&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle null prefix&quot;)&#10;    void shouldHandleNullPrefix() {&#10;        // Given&#10;        String prefix = null;&#10;&#10;        // When&#10;        String orderId = OrderIdService.generateOrderId(prefix);&#10;&#10;        // Then&#10;        assertNotNull(orderId);&#10;        assertTrue(orderId.startsWith(&quot;null-&quot;));&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should reset counter to 1&quot;)&#10;    void shouldResetCounterToOne() {&#10;        // Given&#10;        String prefix = &quot;RESET&quot;;&#10;        OrderIdService.generateOrderId(prefix); // Generate first ID&#10;        OrderIdService.generateOrderId(prefix); // Generate second ID&#10;&#10;        // When&#10;        OrderIdService.resetCounter();&#10;        String orderIdAfterReset = OrderIdService.generateOrderId(prefix);&#10;&#10;        // Then&#10;        String[] parts = orderIdAfterReset.split(&quot;-&quot;);&#10;        assertEquals(&quot;000001&quot;, parts[3]);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should generate unique IDs in concurrent environment&quot;)&#10;    void shouldGenerateUniqueIdsInConcurrentEnvironment() throws Exception {&#10;        // Given&#10;        String prefix = &quot;CONCURRENT&quot;;&#10;        int numberOfThreads = 10;&#10;        int idsPerThread = 100;&#10;        ExecutorService executor = Executors.newFixedThreadPool(numberOfThreads);&#10;        Set&lt;String&gt; generatedIds = new HashSet&lt;&gt;();&#10;&#10;        try {&#10;            // When&#10;            CompletableFuture&lt;Void&gt;[] futures = new CompletableFuture[numberOfThreads];&#10;            for (int i = 0; i &lt; numberOfThreads; i++) {&#10;                futures[i] = CompletableFuture.runAsync(() -&gt; {&#10;                    for (int j = 0; j &lt; idsPerThread; j++) {&#10;                        String orderId = OrderIdService.generateOrderId(prefix);&#10;                        synchronized (generatedIds) {&#10;                            generatedIds.add(orderId);&#10;                        }&#10;                    }&#10;                }, executor);&#10;            }&#10;&#10;            CompletableFuture.allOf(futures).get();&#10;&#10;            // Then&#10;            assertEquals(numberOfThreads * idsPerThread, generatedIds.size());&#10;        } finally {&#10;            executor.shutdown();&#10;        }&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should maintain format consistency across multiple generations&quot;)&#10;    void shouldMaintainFormatConsistencyAcrossMultipleGenerations() {&#10;        // Given&#10;        String prefix = &quot;CONSISTENT&quot;;&#10;        Pattern expectedPattern = Pattern.compile(&quot;CONSISTENT-\\d{8}-\\d{6}-\\d{6}&quot;);&#10;&#10;        // When &amp; Then&#10;        for (int i = 0; i &lt; 50; i++) {&#10;            String orderId = OrderIdService.generateOrderId(prefix);&#10;            assertTrue(expectedPattern.matcher(orderId).matches(), &#10;                &quot;Order ID &quot; + orderId + &quot; doesn't match expected pattern&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/domain/policies/FefoStrategyTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/domain/policies/FefoStrategyTest.java" />
              <option name="originalContent" value="package domain.policies;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;import domain.policies.FefoStrategy;&#10;import domain.inventory.Batch;&#10;import domain.inventory.StockLocation;&#10;import domain.repository.InventoryRepository;&#10;import domain.shared.Code;&#10;import java.sql.Connection;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;&#10;@DisplayName(&quot;FefoStrategy Domain Policy Tests&quot;)&#10;class FefoStrategyTest {&#10;&#10;    private InventoryRepository inventoryRepository;&#10;    private Connection connection;&#10;    private Batch batch1;&#10;    private Batch batch2;&#10;&#10;    private FefoStrategy fefoStrategy;&#10;    private Code productCode;&#10;    private StockLocation stockLocation;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        inventoryRepository = mock(InventoryRepository.class);&#10;        connection = mock(Connection.class);&#10;        batch1 = mock(Batch.class);&#10;        batch2 = mock(Batch.class);&#10;&#10;        fefoStrategy = new FefoStrategy(inventoryRepository);&#10;        productCode = new Code(&quot;PROD001&quot;);&#10;        stockLocation = StockLocation.MAIN_STORE;&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should create FefoStrategy with inventory repository&quot;)&#10;    void shouldCreateFefoStrategyWithInventoryRepository() {&#10;        // When&#10;        FefoStrategy strategy = new FefoStrategy(inventoryRepository);&#10;&#10;        // Then&#10;        assertNotNull(strategy);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should fetch candidates from inventory repository&quot;)&#10;    void shouldFetchCandidatesFromInventoryRepository() {&#10;        // Given&#10;        List&lt;Batch&gt; expectedBatches = List.of(batch1, batch2);&#10;        when(inventoryRepository.findDeductionCandidates(connection, productCode, stockLocation))&#10;            .thenReturn(expectedBatches);&#10;&#10;        // When: call deductUpTo (which uses candidates under the hood)&#10;        fefoStrategy.deductUpTo(connection, productCode, 0, stockLocation);&#10;&#10;        // Then: verify repository was delegated to for candidates&#10;        verify(inventoryRepository).findDeductionCandidates(connection, productCode, stockLocation);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle empty candidates list&quot;)&#10;    void shouldHandleEmptyCandidatesList() {&#10;        // Given&#10;        List&lt;Batch&gt; emptyList = new ArrayList&lt;&gt;();&#10;        when(inventoryRepository.findDeductionCandidates(connection, productCode, stockLocation))&#10;            .thenReturn(emptyList);&#10;&#10;        // When&#10;        fefoStrategy.deductUpTo(connection, productCode, 0, stockLocation);&#10;&#10;        // Then&#10;        verify(inventoryRepository).findDeductionCandidates(connection, productCode, stockLocation);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should delegate to repository for proper FEFO ordering&quot;)&#10;    void shouldDelegateToRepositoryForProperFefoOrdering() {&#10;        // Given&#10;        List&lt;Batch&gt; orderedBatches = List.of(batch1, batch2);&#10;        when(inventoryRepository.findDeductionCandidates(connection, productCode, stockLocation))&#10;            .thenReturn(orderedBatches);&#10;&#10;        // When&#10;        fefoStrategy.deductUpTo(connection, productCode, 0, stockLocation);&#10;&#10;        // Then&#10;        // Verify the repository is called exactly once with correct parameters&#10;        verify(inventoryRepository, times(1)).findDeductionCandidates(connection, productCode, stockLocation);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should rely on repository for expiry date prioritization&quot;)&#10;    void shouldRelyOnRepositoryForExpiryDatePrioritization() {&#10;        // Given&#10;        List&lt;Batch&gt; expiryOrderedBatches = List.of(batch1, batch2);&#10;        when(inventoryRepository.findDeductionCandidates(connection, productCode, stockLocation))&#10;            .thenReturn(expiryOrderedBatches);&#10;&#10;        // When&#10;        fefoStrategy.deductUpTo(connection, productCode, 0, stockLocation);&#10;&#10;        // Then&#10;        // FEFO strategy relies on the repository's ordering which prioritizes earlier expiry first&#10;        verify(inventoryRepository).findDeductionCandidates(connection, productCode, stockLocation);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should not throw when inventory repository is null (constructor does not enforce)&quot;)&#10;    void shouldNotThrowWhenInventoryRepositoryIsNull() {&#10;        // When &amp; Then&#10;        assertDoesNotThrow(() -&gt; new FefoStrategy(null));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package domain.policies;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.Mockito.*;&#10;&#10;import domain.policies.FefoStrategy;&#10;import domain.inventory.Batch;&#10;import domain.inventory.StockLocation;&#10;import domain.repository.InventoryRepository;&#10;import domain.shared.Code;&#10;import java.sql.Connection;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;&#10;@DisplayName(&quot;FefoStrategy Domain Policy Tests&quot;)&#10;class FefoStrategyTest {&#10;&#10;    private InventoryRepository inventoryRepository;&#10;    private Connection connection;&#10;    private Batch batch1;&#10;    private Batch batch2;&#10;&#10;    private FefoStrategy fefoStrategy;&#10;    private Code productCode;&#10;    private StockLocation stockLocation;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        inventoryRepository = mock(InventoryRepository.class);&#10;        connection = mock(Connection.class);&#10;        batch1 = mock(Batch.class);&#10;        batch2 = mock(Batch.class);&#10;&#10;        fefoStrategy = new FefoStrategy(inventoryRepository);&#10;        productCode = new Code(&quot;PROD001&quot;);&#10;        stockLocation = StockLocation.MAIN_STORE;&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should create FefoStrategy with inventory repository&quot;)&#10;    void shouldCreateFefoStrategyWithInventoryRepository() {&#10;        // When&#10;        FefoStrategy strategy = new FefoStrategy(inventoryRepository);&#10;&#10;        // Then&#10;        assertNotNull(strategy);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should fetch candidates from inventory repository&quot;)&#10;    void shouldFetchCandidatesFromInventoryRepository() {&#10;        // Given&#10;        List&lt;Batch&gt; expectedBatches = List.of(batch1, batch2);&#10;        when(inventoryRepository.findDeductionCandidates(connection, productCode, stockLocation))&#10;            .thenReturn(expectedBatches);&#10;&#10;        // When: call deductUpTo (which uses candidates under the hood)&#10;        fefoStrategy.deductUpTo(connection, productCode, 0, stockLocation);&#10;&#10;        // Then: verify repository was delegated to for candidates&#10;        verify(inventoryRepository).findDeductionCandidates(connection, productCode, stockLocation);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle empty candidates list&quot;)&#10;    void shouldHandleEmptyCandidatesList() {&#10;        // Given&#10;        List&lt;Batch&gt; emptyList = new ArrayList&lt;&gt;();&#10;        when(inventoryRepository.findDeductionCandidates(connection, productCode, stockLocation))&#10;            .thenReturn(emptyList);&#10;&#10;        // When&#10;        fefoStrategy.deductUpTo(connection, productCode, 0, stockLocation);&#10;&#10;        // Then&#10;        verify(inventoryRepository).findDeductionCandidates(connection, productCode, stockLocation);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should delegate to repository for proper FEFO ordering&quot;)&#10;    void shouldDelegateToRepositoryForProperFefoOrdering() {&#10;        // Given&#10;        List&lt;Batch&gt; orderedBatches = List.of(batch1, batch2);&#10;        when(inventoryRepository.findDeductionCandidates(connection, productCode, stockLocation))&#10;            .thenReturn(orderedBatches);&#10;&#10;        // When&#10;        fefoStrategy.deductUpTo(connection, productCode, 0, stockLocation);&#10;&#10;        // Then&#10;        // Verify the repository is called exactly once with correct parameters&#10;        verify(inventoryRepository, times(1)).findDeductionCandidates(connection, productCode, stockLocation);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should rely on repository for expiry date prioritization&quot;)&#10;    void shouldRelyOnRepositoryForExpiryDatePrioritization() {&#10;        // Given&#10;        List&lt;Batch&gt; expiryOrderedBatches = List.of(batch1, batch2);&#10;        when(inventoryRepository.findDeductionCandidates(connection, productCode, stockLocation))&#10;            .thenReturn(expiryOrderedBatches);&#10;&#10;        // When&#10;        fefoStrategy.deductUpTo(connection, productCode, 0, stockLocation);&#10;&#10;        // Then&#10;        // FEFO strategy relies on the repository's ordering which prioritizes earlier expiry first&#10;        verify(inventoryRepository).findDeductionCandidates(connection, productCode, stockLocation);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should throw exception when inventory repository is null&quot;)&#10;    void shouldThrowExceptionWhenInventoryRepositoryIsNull() {&#10;        // When &amp; Then&#10;        assertThrows(NullPointerException.class, () -&gt; new FefoStrategy(null));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/domain/shared/MoneyTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/domain/shared/MoneyTest.java" />
              <option name="originalContent" value="package domain.shared;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.params.ParameterizedTest;&#10;import org.junit.jupiter.params.provider.ValueSource;&#10;import org.junit.jupiter.params.provider.CsvSource;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;import domain.shared.Money;&#10;import java.math.BigDecimal;&#10;&#10;@DisplayName(&quot;Money Domain Object Tests&quot;)&#10;class MoneyTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should create Money with valid BigDecimal amount&quot;)&#10;    void shouldCreateMoneyWithValidBigDecimalAmount() {&#10;        // Given&#10;        BigDecimal amount = new BigDecimal(&quot;100.50&quot;);&#10;&#10;        // When&#10;        Money money = Money.of(amount);&#10;&#10;        // Then&#10;        assertEquals(amount.stripTrailingZeros(), money.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should create Money from cents&quot;)&#10;    void shouldCreateMoneyFromCents() {&#10;        // Given&#10;        long cents = 10050L; // 100.50&#10;&#10;        // When&#10;        Money money = Money.of(cents);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;100.50&quot;), money.amount());&#10;        assertEquals(10050L, money.cents());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should add two Money amounts&quot;)&#10;    void shouldAddTwoMoneyAmounts() {&#10;        // Given&#10;        Money money1 = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;        Money money2 = Money.of(new BigDecimal(&quot;50.25&quot;));&#10;&#10;        // When&#10;        Money result = money1.plus(money2);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;150.75&quot;), result.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should subtract two Money amounts&quot;)&#10;    void shouldSubtractTwoMoneyAmounts() {&#10;        // Given&#10;        Money money1 = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;        Money money2 = Money.of(new BigDecimal(&quot;50.25&quot;));&#10;&#10;        // When&#10;        Money result = money1.minus(money2);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;50.25&quot;), result.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should multiply Money by integer&quot;)&#10;    void shouldMultiplyMoneyByInteger() {&#10;        // Given&#10;        Money money = Money.of(new BigDecimal(&quot;25.50&quot;));&#10;&#10;        // When&#10;        Money result = money.times(3);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;76.50&quot;), result.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle zero amounts&quot;)&#10;    void shouldHandleZeroAmounts() {&#10;        // When&#10;        Money zeroFromCents = Money.of(0L);&#10;        Money zeroFromBigDecimal = Money.of(BigDecimal.ZERO);&#10;&#10;        // Then&#10;        assertEquals(BigDecimal.ZERO, zeroFromCents.amount());&#10;        assertEquals(BigDecimal.ZERO, zeroFromBigDecimal.amount());&#10;        assertEquals(0L, zeroFromCents.cents());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should be equal when amounts are same&quot;)&#10;    void shouldBeEqualWhenAmountsAreSame() {&#10;        // Given&#10;        Money money1 = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;        Money money2 = Money.of(10050L); // Same amount in cents&#10;&#10;        // Then&#10;        assertEquals(money1, money2);&#10;        assertEquals(money1.hashCode(), money2.hashCode());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should convert to string representation&quot;)&#10;    void shouldConvertToStringRepresentation() {&#10;        // Given&#10;        Money money = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;&#10;        // When&#10;        String result = money.toString();&#10;&#10;        // Then&#10;        assertEquals(&quot;100.5&quot;, result); // stripTrailingZeros removes .0&#10;    }&#10;&#10;    @ParameterizedTest&#10;    @ValueSource(longs = {0, 100, 1050, 10050, 100000})&#10;    @DisplayName(&quot;Should correctly convert between cents and BigDecimal&quot;)&#10;    void shouldCorrectlyConvertBetweenCentsAndBigDecimal(long cents) {&#10;        // When&#10;        Money money = Money.of(cents);&#10;&#10;        // Then&#10;        assertEquals(cents, money.cents());&#10;        assertEquals(new BigDecimal(cents).divide(new BigDecimal(&quot;100&quot;)), money.amount());&#10;    }&#10;&#10;    @ParameterizedTest&#10;    @CsvSource({&#10;        &quot;100.50, 50.25, 150.75&quot;,&#10;        &quot;0.00, 100.00, 100.00&quot;,&#10;        &quot;250.75, 124.25, 375.00&quot;&#10;    })&#10;    @DisplayName(&quot;Should correctly add different amounts&quot;)&#10;    void shouldCorrectlyAddDifferentAmounts(String amount1, String amount2, String expected) {&#10;        // Given&#10;        Money money1 = Money.of(new BigDecimal(amount1));&#10;        Money money2 = Money.of(new BigDecimal(amount2));&#10;&#10;        // When&#10;        Money result = money1.plus(money2);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(expected), result.amount());&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package domain.shared;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.params.ParameterizedTest;&#10;import org.junit.jupiter.params.provider.ValueSource;&#10;import org.junit.jupiter.params.provider.CsvSource;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;import domain.shared.Money;&#10;import java.math.BigDecimal;&#10;&#10;@DisplayName(&quot;Money Domain Object Tests&quot;)&#10;class MoneyTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should create Money with valid BigDecimal amount&quot;)&#10;    void shouldCreateMoneyWithValidBigDecimalAmount() {&#10;        // Given&#10;        BigDecimal amount = new BigDecimal(&quot;100.50&quot;);&#10;&#10;        // When&#10;        Money money = Money.of(amount);&#10;&#10;        // Then&#10;        assertEquals(amount.stripTrailingZeros(), money.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should create Money from cents&quot;)&#10;    void shouldCreateMoneyFromCents() {&#10;        // Given&#10;        long cents = 10050L; // 100.50&#10;&#10;        // When&#10;        Money money = Money.of(cents);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;100.50&quot;), money.amount());&#10;        assertEquals(10050L, money.cents());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should add two Money amounts&quot;)&#10;    void shouldAddTwoMoneyAmounts() {&#10;        // Given&#10;        Money money1 = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;        Money money2 = Money.of(new BigDecimal(&quot;50.25&quot;));&#10;&#10;        // When&#10;        Money result = money1.plus(money2);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;150.75&quot;), result.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should subtract two Money amounts&quot;)&#10;    void shouldSubtractTwoMoneyAmounts() {&#10;        // Given&#10;        Money money1 = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;        Money money2 = Money.of(new BigDecimal(&quot;50.25&quot;));&#10;&#10;        // When&#10;        Money result = money1.minus(money2);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;50.25&quot;), result.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should multiply Money by integer&quot;)&#10;    void shouldMultiplyMoneyByInteger() {&#10;        // Given&#10;        Money money = Money.of(new BigDecimal(&quot;25.50&quot;));&#10;&#10;        // When&#10;        Money result = money.times(3);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;76.50&quot;), result.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle zero amounts&quot;)&#10;    void shouldHandleZeroAmounts() {&#10;        // When&#10;        Money zeroFromCents = Money.of(0L);&#10;        Money zeroFromBigDecimal = Money.of(BigDecimal.ZERO);&#10;&#10;        // Then&#10;        assertEquals(BigDecimal.ZERO, zeroFromCents.amount());&#10;        assertEquals(BigDecimal.ZERO, zeroFromBigDecimal.amount());&#10;        assertEquals(0L, zeroFromCents.cents());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should be equal when amounts are same&quot;)&#10;    void shouldBeEqualWhenAmountsAreSame() {&#10;        // Given&#10;        Money money1 = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;        Money money2 = Money.of(10050L); // Same amount in cents&#10;&#10;        // Then&#10;        assertEquals(money1, money2);&#10;        assertEquals(money1.hashCode(), money2.hashCode());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should convert to string representation&quot;)&#10;    void shouldConvertToStringRepresentation() {&#10;        // Given&#10;        Money money = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;&#10;        // When&#10;        String result = money.toString();&#10;&#10;        // Then&#10;        assertEquals(&quot;100.5&quot;, result); // stripTrailingZeros removes .0&#10;    }&#10;&#10;    @ParameterizedTest&#10;    @ValueSource(longs = {0, 100, 1050, 10050, 100000})&#10;    @DisplayName(&quot;Should correctly convert between cents and BigDecimal&quot;)&#10;    void shouldCorrectlyConvertBetweenCentsAndBigDecimal(long cents) {&#10;        // When&#10;        Money money = Money.of(cents);&#10;&#10;        // Then&#10;        assertEquals(cents, money.cents());&#10;        assertEquals(new BigDecimal(cents).divide(new BigDecimal(&quot;100&quot;)), money.amount());&#10;    }&#10;&#10;    @ParameterizedTest&#10;    @CsvSource({&#10;        &quot;100.50, 50.25, 150.75&quot;,&#10;        &quot;0.00, 100.00, 100.00&quot;,&#10;        &quot;250.75, 124.25, 375.00&quot;&#10;    })&#10;    @DisplayName(&quot;Should correctly add different amounts&quot;)&#10;    void shouldCorrectlyAddDifferentAmounts(String amount1, String amount2, String expected) {&#10;        // Given&#10;        Money money1 = Money.of(new BigDecimal(amount1));&#10;        Money money2 = Money.of(new BigDecimal(amount2));&#10;&#10;        // When&#10;        Money result = money1.plus(money2);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(expected), result.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should not be equal to null&quot;)&#10;    void shouldNotBeEqualToNull() {&#10;        // Given&#10;        Money money = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;&#10;        // Then&#10;        assertNotEquals(null, money);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should not be equal to different class&quot;)&#10;    void shouldNotBeEqualToDifferentClass() {&#10;        // Given&#10;        Money money = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;        String string = &quot;100.50&quot;;&#10;&#10;        // Then&#10;        assertNotEquals(money, string);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle negative amounts&quot;)&#10;    void shouldHandleNegativeAmounts() {&#10;        // Given&#10;        Money negativeMoney = Money.of(new BigDecimal(&quot;-50.25&quot;));&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;-50.25&quot;), negativeMoney.amount());&#10;        assertEquals(-5025L, negativeMoney.cents());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle subtraction resulting in negative&quot;)&#10;    void shouldHandleSubtractionResultingInNegative() {&#10;        // Given&#10;        Money money1 = Money.of(new BigDecimal(&quot;25.00&quot;));&#10;        Money money2 = Money.of(new BigDecimal(&quot;50.00&quot;));&#10;&#10;        // When&#10;        Money result = money1.minus(money2);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;-25&quot;), result.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should strip trailing zeros&quot;)&#10;    void shouldStripTrailingZeros() {&#10;        // Given&#10;        Money money = Money.of(new BigDecimal(&quot;100.00&quot;));&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;100&quot;), money.amount());&#10;        assertEquals(&quot;100&quot;, money.toString());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle multiplication by zero&quot;)&#10;    void shouldHandleMultiplicationByZero() {&#10;        // Given&#10;        Money money = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;&#10;        // When&#10;        Money result = money.times(0);&#10;&#10;        // Then&#10;        assertEquals(BigDecimal.ZERO, result.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should handle multiplication by negative number&quot;)&#10;    void shouldHandleMultiplicationByNegativeNumber() {&#10;        // Given&#10;        Money money = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;&#10;        // When&#10;        Money result = money.times(-2);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;-201&quot;), result.amount());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should maintain immutability in operations&quot;)&#10;    void shouldMaintainImmutabilityInOperations() {&#10;        // Given&#10;        Money original = Money.of(new BigDecimal(&quot;100.50&quot;));&#10;        Money other = Money.of(new BigDecimal(&quot;50.25&quot;));&#10;&#10;        // When&#10;        Money added = original.plus(other);&#10;        Money subtracted = original.minus(other);&#10;        Money multiplied = original.times(2);&#10;&#10;        // Then&#10;        assertEquals(new BigDecimal(&quot;100.5&quot;), original.amount()); // Original unchanged&#10;        assertEquals(new BigDecimal(&quot;150.75&quot;), added.amount());&#10;        assertEquals(new BigDecimal(&quot;50.25&quot;), subtracted.amount());&#10;        assertEquals(new BigDecimal(&quot;201&quot;), multiplied.amount());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>